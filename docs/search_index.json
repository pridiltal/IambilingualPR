[["index.html", "I am Bilingual - Python and R Preface", " I am Bilingual - Python and R Priyanga Dilini Talagala Thiyanga S. Talagala 2021-04-26 Preface WIP!! This book is still in progress in various draft forms. "],["intro.html", "Chapter 1 Introduction to R and Python 1.1 About R and Python 1.2 History of R and Python 1.3 Story behind their names 1.4 Logo 1.5 Worldwide Google Trends 1.6 Installation 1.7 Ranked:15Python packages", " Chapter 1 Introduction to R and Python WIP 1.1 About R and Python 1.1.1 R R is an object oriented, open source programming language and environment for statistical computing and graphics. R is not a statistics system but an environment within which statistical techniques are implemented. Further, R gains more capabilities via packages, its fundamental shareable units that bundle together R functions, code, data, documentation, and tests etc. (R Core Team 2020). 1.1.2 Python Python is an object-oriented, interpreted, and interactive programming language. The motto of Python language is “Batteries included” as the functionality of the language can be performed via its comprehensive standard in built Libraries (Wikipedia contributors 2020a). 1.2 History of R and Python 1.2.1 R R is an implementation of the S programming language which was created by John Chambers in 1976. In 1991, an alternative implementation of the basic S language was developed by Ross Ihaka and Robert Gentleman, University of Auckland, New Zealand. It was published in 1993 (Wikipedia contributors 2020b). 1.2.2 Python In 1989, Guido van Rossum at Centrum Wiskunde &amp; Informatica (CWI) in the Netherlands started the implementation of Python as a successor to ABC programming language. Python 2.0 was released in 2000. Python 3.0, a major revision of the language that is not completely backward-compatible was released in 2008 (Wikipedia contributors 2020a) . Today many developers create libraries strictly for the use with Python 3. 1.3 Story behind their names 1.3.1 R R was introduced by Ross Ihaka and Robert Gentleman and it was named after the first names of the two authors. The name of the “S” language also had some influence on the selection of its name and it was selected partly as a play on the name of S (Wikipedia contributors 2020b). 1.3.2 Python Python was named after a famous TV show ‘Monty Python’s Flying Circus’. Guido van Rossum, the creater of Python was a big fan of the TV show. He wanted to name his invention with a short, unique and slightly mysterious name and chose Python as a working title for his ongoing project. 1.4 Logo Figure 1.1: Retrieved from: https://www.r-project.org/logo/ Figure 1.2: Retrieved from: https://www.python.org/community/logos/ 1.5 Worldwide Google Trends 1.6 Installation 1.6.1 Python Ref: https://www.w3schools.com/python/python_getstarted.asp Many PCs and Macs will have python already installed. To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe): C:\\Users\\Your Name&gt;python --version To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type: python --version If you find that you do not have python installed on your computer, then you can download it for free from the following website: https://www.python.org/ 1.6.2 R You can download it for free from the following websites: R (https://cran.r-project.org/) RStudio (https://www.rstudio.com/products/rstudio/download/#download). 1.7 Ranked:15Python packages for Data Science http://blog.thedataincubator.com/wp-content/uploads/2017/04/Ranked-15-Python-Packages-for-Data-Science.pdf References "],["variables-expressions-and-statements.html", "Chapter 2 Variables, expressions, and statements 2.1 Basic Exmaple", " Chapter 2 Variables, expressions, and statements 2.1 Basic Exmaple This is a test code 2.1.1 R code # This is an R code x &lt;- 1 y &lt;- 3 print(x+y) ## [1] 4 2.1.2 Python Code The ‘python’ engine in knitr requires the reticulate package. library(reticulate) # This is a Python code x = 1 y = 3 print(x+y) ## 4 "],["conditional-execution.html", "Chapter 3 Conditional execution", " Chapter 3 Conditional execution WIP "],["functions.html", "Chapter 4 Functions", " Chapter 4 Functions WIP "],["iteration.html", "Chapter 5 Iteration", " Chapter 5 Iteration WIP "],["import.html", "Chapter 6 Import", " Chapter 6 Import WIP "],["tidy.html", "Chapter 7 Tidy", " Chapter 7 Tidy WIP "],["transform.html", "Chapter 8 Transform", " Chapter 8 Transform WIP "],["visualize.html", "Chapter 9 Visualize 9.1 Data 9.2 R 9.3 Python", " Chapter 9 Visualize 9.1 Data The Palmer penguins dataset was introduced by Allison Horst, Alison Hill, and Kristen Gorman provide a great dataset for data exploration and visualization, as an alternative to iris. It was first introduced as an R package. The released version of palmerpenguins can be instaalled from CRAN with: R Installation install.packages(&quot;palmerpenguins&quot;) Using palmerpenguins python package you can easily load the Palmer penguins into your python environment. Python Installation pip install palmerpenguins The palmerpenguins package contains two datasets : penguins and penguins_raw. penguins is a simplified version of the penguins_raw data. 9.2 R 9.2.1 base R package # Load Palmer Archipelago (Antarctica) Penguin Data library(palmerpenguins) # Return the first part of the dataset head(penguins) ## # A tibble: 6 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; ## 1 Adelie Torge… 39.1 18.7 181 3750 male ## 2 Adelie Torge… 39.5 17.4 186 3800 fema… ## 3 Adelie Torge… 40.3 18 195 3250 fema… ## 4 Adelie Torge… NA NA NA NA &lt;NA&gt; ## 5 Adelie Torge… 36.7 19.3 193 3450 fema… ## 6 Adelie Torge… 39.3 20.6 190 3650 male ## # … with 1 more variable: year &lt;int&gt; # Retrieve column names colnames(penguins) ## [1] &quot;species&quot; &quot;island&quot; &quot;bill_length_mm&quot; ## [4] &quot;bill_depth_mm&quot; &quot;flipper_length_mm&quot; &quot;body_mass_g&quot; ## [7] &quot;sex&quot; &quot;year&quot; # Define color for each of the 3 iris species colors &lt;- c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;) colors &lt;- colors[as.numeric(penguins$species)] # Define shapes shapes = c(16, 17, 18) shapes &lt;- shapes[as.numeric(penguins$species)] plot(x = penguins$flipper_length_mm, y = penguins$body_mass_g, col = colors, pch = shapes, xlab = &quot;Flipper Length&quot;, ylab = &quot;Body Mass&quot; ) 9.2.2 gggplot2 Package ggplot2 is an R package dedicated to data visualization which is based on The Grammar of Graphics (Wilkinson 2012). #load ggplot2 package to make statistical graphics library(ggplot2) library(palmerpenguins) p &lt;- ggplot(penguins) + geom_point( aes(x = flipper_length_mm, y = body_mass_g, color = species, shape = species)) + xlab(&quot;Flipper Length&quot;)+ ylab(&quot;Body Mass&quot;) print(p) 9.3 Python 9.3.1 Matplotlib package Matplotlib is mainly deployed for basic plotting. Visualization using Matplotlib generally consists of bars, pies, lines, scatter plots and so on. #load functions in palmerpenguins package from palmerpenguins import load_penguins penguins = load_penguins() # Return the first part of the dataset penguins.head() # Retrieve column names list(penguins.columns) # Import matplotlib to make statistical graphics. # By convention, it is imported with the shorthand sns. import matplotlib.pyplot as plt colors = {&#39;Adelie&#39;:&#39;blue&#39;, &#39;Gentoo&#39;:&#39;orange&#39;, &#39;Chinstrap&#39;:&#39;green&#39;} plt.scatter(penguins.flipper_length_mm, penguins.body_mass_g, c= penguins.species.apply(lambda x: colors[x])) plt.xlabel(&#39;Flipper Length&#39;) plt.ylabel(&#39;Body Mass&#39;) 9.3.2 seaborn Package Seaborn provides a variety of visualization patterns. It uses fewer syntax and has easily interesting default themes. # Import seaborn to make statistical graphics. # By convention, it is imported with the shorthand sns. import seaborn as sns #load functions in palmerpenguins package from palmerpenguins import load_penguins penguins = load_penguins() # Apply the default theme sns.set_theme() # sns.set_style(&#39;whitegrid&#39;) p = sns.relplot(x = &#39;flipper_length_mm&#39;, y =&#39;body_mass_g&#39;, hue = &#39;species&#39;, style = &#39;species&#39;, data = penguins) p.set_xlabels(&#39;Flipper Length&#39;) p.set_ylabels(&#39;Body Mass&#39;) The function relplot() is named that way because it is designed to visualize many different statistical relationships. The relplot() function has a convenient kind parameter that lets you easily switch to this alternate representation: scatterplot() with kind=&quot;scatter&quot;; the default and lineplot() with kind=&quot;line&quot;. 9.3.3 plotnine package https://pypi.org/project/plotnine/ plotnine is an implementation of a grammar of graphics in Python, it is based on ggplot2. The grammar allows users to compose plots by explicitly mapping data to the visual objects that make up the plot. Plotting with a grammar is powerful, it makes custom (and otherwise complex) plots are easy to think about and then create, while the simple plots remain simple. References "],["model.html", "Chapter 10 Model", " Chapter 10 Model WIP "],["communicate.html", "Chapter 11 Communicate", " Chapter 11 Communicate WIP "],["advanced-r-and-python.html", "Chapter 12 Advanced R and Python 12.1 Time Series Forecasting", " Chapter 12 Advanced R and Python WIP 12.1 Time Series Forecasting R Python fable-Forecasting Models for Tidy Time Series statsmodels- Statistics based models forecast- Forecasting Functions for Time Series and Linear Models sktime- A unified framework for machine learning with time series \\(\\text{}\\) GluonTS- Deep learning-based models. "],["references.html", "References", " References "]]
