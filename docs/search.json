[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R and Python: WE ARE BILINGUAL",
    "section": "",
    "text": "About this\nWhether you’re an R user looking to learn Python, a Python user looking to learn R, or simply looking for a comprehensive source to learn both languages, this book is for you!\nWith “R and PYTHON: WE ARE BILINGUAL,” you’ll gain a thorough understanding of both R and/or Python and learn how to use them together to solve complex problems."
  },
  {
    "objectID": "01-intro.html#about-r-and-python",
    "href": "01-intro.html#about-r-and-python",
    "title": "1  Introduction to R and Python",
    "section": "1.1 About R and Python",
    "text": "1.1 About R and Python\nR and Python are both versatile and widely used open-source programming languages with uses in statistical computing and graphics. R is an object-oriented environment that enables statistical techniques to be easily implemented and adapted for different use cases. It is specifically designed for statistical computing and graphics. R’s extensive library of packages, which provide a variety of functions, data, and documentation that can be readily shared and used by other researchers and analysts, is one of its main strengths. These packages provide a wide range of capabilities, making R an essential tool for data analysis, visualization, and modeling across a wide range of disciplines.\nPython, on the other hand, is a general-purpose computer language that excels at statistical computing and graphics. Python’s object-oriented method lends itself well to organizing and manipulating complicated data structures, and its interactive nature enables rapid prototyping and experimentation. Python also has a robust ecosystem of third-party libraries and frameworks, including several for data processing and visualization. While Python’s statistical capabilities are not as extensive as those of R, its versatility and popularity make it a popular option for a variety of applications other than statistical computing.\nWhen considering programming languages for data analysis and manipulation, R and Python are two of the most popular choices. While both languages have similarities in terms of syntax and functionality, there are also several key differences between the two that can impact their usefulness for different projects or tasks. In this context, let’s explore some of the key differences between R and Python, including their data structures, function syntax, package ecosystems, object-oriented programming support, and error handling.\n\nData structures: R has several built-in data structures, such as vectors, matrices, data frames, and lists, that are optimized for statistical analysis and data manipulation. Python, on the other hand, has a more diverse range of built-in data structures, including lists, tuples, dictionaries, and sets, that can be used for a variety of purposes.\nFunction syntax: The syntax for defining functions is slightly different in R and Python. In R, the function keyword is used to define a function, while in Python the def keyword is used. Additionally, R allows for optional arguments to be specified by name, while Python requires all arguments to be specified in order.\nPackage ecosystems: Both R and Python have large ecosystems of packages and libraries that extend the functionality of the language. However, R’s ecosystem is more focused on statistical analysis and data manipulation, while Python’s ecosystem is more diverse and includes libraries for web development, machine learning, scientific computing, and more.\nObject-oriented programming: Python is a fully object-oriented language, whereas R has some support for object-oriented programming but is primarily a functional programming language.\nError handling: Python has a built-in mechanism for handling errors, called exceptions, that allows for more fine-grained control over error handling. R does not have a built-in exception mechanism, but instead relies on returning error codes or messages from functions.\n\nOverall, the choice between R and Python depends on the specific needs of the project or task at hand. R is a good choice for statistical analysis and data manipulation, while Python is more versatile and can be used for a wider range of tasks. However, both languages have their strengths and weaknesses, and many projects may benefit from using both languages together in a complementary way."
  },
  {
    "objectID": "01-intro.html#history-of-r-and-python",
    "href": "01-intro.html#history-of-r-and-python",
    "title": "1  Introduction to R and Python",
    "section": "1.2 History of R and Python",
    "text": "1.2 History of R and Python\nR is an implementation of the S computer language, which was created in 1976 by John Chambers. Ross Ihaka and Robert Gentleman of the University of Auckland in New Zealand created an alternate version of the basic S language in 1991. R, an alternative implementation, was released in 1993. R has since grown in popularity and is now a top statistical computing and graphics tool.\nPython, on the other hand, was developed in 1989 at Centrum Wiskunde & Informatica (CWI) in the Netherlands by Guido van Rossum. It was created as a replacement for the ABC computer language. Python 2.0 was released in 2000, and Python 3.0, a significant language revision that is not fully backward-compatible, was released in 2008. Today, many developers create libraries especially for use with Python 3, and the language has grown in popularity for a variety of uses other than statistical computing, such as web development, machine learning, and scientific computing."
  },
  {
    "objectID": "01-intro.html#story-behind-their-names",
    "href": "01-intro.html#story-behind-their-names",
    "title": "1  Introduction to R and Python",
    "section": "1.3 Story behind their names",
    "text": "1.3 Story behind their names\n\n1.3.1 R\nR is called after its creators, Robert Gentleman and Ross Ihaka. S was named after its creators, John Chambers and his coworkers at Bell Labs, whose surnames all began with the letter “S.” This practice is continued by R’s name, which incorporates the first letter of its creators’ first names.\n\n\n1.3.2 Python\nGuido van Rossum, the creator of Python, was a fan of the British comedy group Monty Python’s Flying Circus. Van Rossum selected the name Python as a working title for his project in December 1989, while working at the Netherlands’ National Research Institute for Mathematics and Computer Science. He wanted a short, distinct, and slightly mysterious name for his language, and he liked the connotations of the term “Python” - it was an uncommon and exotic species, and it also had a connection to serpents, implying the language’s power and flexibility. Van Rossum kept the name when he released the first version of Python in February 1991, and it has since become one of the most famous programming languages in the world."
  },
  {
    "objectID": "01-intro.html#logo",
    "href": "01-intro.html#logo",
    "title": "1  Introduction to R and Python",
    "section": "1.4 Logo",
    "text": "1.4 Logo\n\n\n\n\n\nRetrieved from: https://www.r-project.org/logo/\n\n\n\n\n\n\n\n\n\nRetrieved from: https://www.python.org/community/logos/"
  },
  {
    "objectID": "01-intro.html#installation",
    "href": "01-intro.html#installation",
    "title": "1  Introduction to R and Python",
    "section": "1.5 Installation",
    "text": "1.5 Installation\n\n1.5.1 R\nTo get started with R programming, you’ll need to follow two steps:\n\nDownload R, a programming language for statistical computing and graphics. You can get the latest version for free from the official R website at https://cran.rstudio.com/. Make sure to choose the appropriate version for your computer’s operating system.\nInstall RStudio, an integrated development environment (IDE) for R. RStudio makes it easier to write, debug, and organize your R code. There are two versions of RStudio available: RStudio Desktop and RStudio Server. RStudio Desktop is a standalone desktop application that you can download from https://posit.co/download/rstudio-desktop/. RStudio Server is a web-based version that runs on a remote server and can be accessed through a web browser.\n\n\n\n1.5.2 Python\nTo get started with Python programming, you’ll need to follow these steps:\n\nDownload Python: Python is an open-source programming language that is used for a wide range of tasks, including web development, data analysis, and machine learning. You can download Python for free from the official Python website at https://www.python.org/downloads/. Make sure to choose the appropriate version for your computer’s operating system.\nInstall an Integrated Development Environment (IDE): An IDE is a software application that provides comprehensive facilities to computer programmers for software development. It typically consists of a code editor, a debugger, and a compiler. There are several options for Python IDEs, including:\n\n\nPyCharm: PyCharm is a popular Python IDE developed by JetBrains. It is available in both free and paid versions and provides advanced features for web development, scientific computing, and data analysis. You can download PyCharm from https://www.jetbrains.com/pycharm/download/.\nVisual Studio Code: Visual Studio Code is a free, open-source IDE developed by Microsoft. It supports multiple programming languages, including Python, and provides a range of features such as debugging, syntax highlighting, and code completion. You can download Visual Studio Code from https://code.visualstudio.com/download.\nJupyter Notebook: Jupyter Notebook is a web-based interactive computing environment that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. It is commonly used for data analysis and machine learning tasks. You can download Jupyter Notebook from https://jupyter.org/install.\n\nOnce you have downloaded and installed Python and an IDE of your choice, you’re ready to start coding in Python!"
  },
  {
    "objectID": "01-intro.html#install-and-load-libraries",
    "href": "01-intro.html#install-and-load-libraries",
    "title": "1  Introduction to R and Python",
    "section": "1.6 Install and Load Libraries",
    "text": "1.6 Install and Load Libraries\n\n1.6.1 R\nR Packages: A Beginner’s Guide https://www.datacamp.com/community/tutorials/r-packages-guide?utm_source=adwords_ppc&utm_campaignid=1655852085&utm_adgroupid=61045434222&utm_device=c&utm_keyword=%2Bload%20%2Bpackage%20%2Br&utm_matchtype=b&utm_network=g&utm_adpostion=&utm_creative=469789579329&utm_targetid=aud-522010995285:kwd-589281898774&utm_loc_interest_ms=9071445&utm_loc_physical_ms=1009919&gclid=Cj0KCQjwyZmEBhCpARIsALIzmnKGh4ZVHa4OxhLq0JUzpoBMMRhQvCGEmvscFuLZ5CI3V3JPsQ2v9P8aAhwpEALw_wcB\nAn R package is a way to organize your own work and share it with others. Typically, a package contains code, documentation for the package and the functions inside, some tests to check everything works as it should, and data sets.\nThree of the most popular repositories for R packages are: CRAN, Bioconductor and Github.\n\n1.6.1.1 Installing Packages From CRAN\ninstall.packages(\"package_name\")\nExample\ninstall.packages(\"tidyverse\")\nAfter running this, some messages will be diplayed on the console. They will depend on what operating system you are using, the dependencies, and if the package was successfully installed.\nTo install more than a package at the same time, we can use a character vector\ninstall.packages(c(\"vioplot\", \"MASS\"))\nThe function install.packages will download the source code from on the CRAN mirrors and install the package (and any dependencies) locally on your computer.\nYou have to install a package only once.\n\n\n1.6.1.2 Load Packages\nAfter a package is installed, you are ready to use its functionalities.\nIf you just need a sporadic use of a few functions or data inside a package you can access them with the notation\npackagename::functionname().\nIf you will make a more intensive use of the package, then maybe is worth to load it into memory. The simplest way to do this is with the library() command.\nPlease note that the input of install.packages() is a character vector and requires the name to be in quotes, while library() accepts either character or name and makes it possible for you to write the name of the package without quotes.\nOnce you have the package installed, you can load the library into your R session for use. Any of the functions that are specific to that package will be available for you to use by simply calling the function as you would for any of the base functions. Note that quotations are not required here.\nlibrary(tidyverse)\n\n\n\n1.6.2 Python\nUse ‘import module’ or ‘from module import’? https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import\nMethod 1: import module\nMethod 2: from module import foo\nThe difference between import module and from module import foo is subjective. User can select one method and be consitent in the use of it.\n\n\n\n\n\n\n\nimport module\nfrom module import foo\n\n\n\n\nPros\nPros\n\n\n- Less Maintanence of the import statements\n- Less typying to use foo function\n\n\n- Don’t need to add any aditional imports to start using another item from the same module\n- More control over whcih items of the module can be accessed\n\n\nCons\nCons\n\n\n- Typing module.foo in the code be tedious (dull, boring )\nto use new items from the module the user have to update the import statement\n\n\n\n\nIt can be minimized by using import module as mo, then typing mo.foo | You loose context about foo. For example it is less clear ceil() does, compared to math.ceil()\n\nDon’t use\n\nfrom modle import *\n\nBecause it clutters or fills with untidy collection of things in the namespace\n\nimport *\n\nFor any reasonable large set of code, if you import * you will likely be cementing it into the module, unable to be removed.\nThis is because now it is difficullt to identiify what items used in the code are coming from module."
  },
  {
    "objectID": "02-basics.html#basic-exmaple",
    "href": "02-basics.html#basic-exmaple",
    "title": "2  Variables, expressions, and statements",
    "section": "2.1 Basic Exmaple",
    "text": "2.1 Basic Exmaple\nHere are some examples in both R and Python:\n\n2.1.1 Variables\n\n2.1.1.1 R example\n\n# Creating a variable called \"age\" and assigning it the value 25\nage <- 25\n\n# Creating a variable called \"name\" and assigning it a string value\nname <- \"John Doe\"\n\n# Creating a variable called \"score\" and assigning it the value 90\nscore <- 90\n\n# Creating a vector of numbers and assigning it to a variable called \"grades\"\ngrades <- c(80, 90, 85, 92, 87)\n\n\n\n2.1.1.2 Python example\nThe ‘python’ engine in knitr requires the reticulate package.\n\nlibrary(reticulate)\n\n\n# Creating a variable called \"age\" and assigning it the value 25\nage = 25\n\n# Creating a variable called \"name\" and assigning it a string value\nname = \"John Doe\"\n\n# Creating a variable called \"score\" and assigning it the value 90\nscore = 90\n\n# Creating a list of numbers and assigning it to a variable called \"grades\"\ngrades = [80, 90, 85, 92, 87]\n\n\n\n\n2.1.2 Expressions\n\n2.1.2.1 R example\n\n# Performing a mathematical expression and storing the result in a variable called \"result\"\nresult <- 5 + 10\n\n# Combining variables and strings in an expression to create a new string\ngreeting <- paste(\"Hello\", name, \"your age is\", age)\n\n# Using a logical expression to check if a variable is greater than 10\nis_greater_than_10 <- score > 10\n\n# Combining variables, functions, and operators in an expression to create a new vector\nnew_grades <- grades * 0.7 + 30\n\n\n\n2.1.2.2 Python example\n\n# Performing a mathematical expression and storing the result in a variable called \"result\"\nresult = 5 + 10\n\n# Combining variables and strings in an expression to create a new string\ngreeting = \"Hello \" + name + \", your age is \" + str(age)\n\n# Using a logical expression to check if a variable is greater than 10\nis_greater_than_10 = score > 10\n\n# Combining variables, functions, and operators in an expression to create a new list\nnew_grades = [x * 0.7 + 30 for x in grades]\n\n\n\n\n2.1.3 Statements\n\n2.1.3.1 R example\n\n# Assigning a value to a variable and then printing it\nage <- 25\nprint(age)\n\n[1] 25\n\n# Using an if statement to control program flow\nif (age > 18) {\n  print(\"You are an adult\")\n} else {\n  print(\"You are a minor\")\n}\n\n[1] \"You are an adult\"\n\n# Using a for loop to iterate over a vector and print each value\nfor (grade in grades) {\n  print(grade)\n}\n\n[1] 80\n[1] 90\n[1] 85\n[1] 92\n[1] 87\n\n# Defining a function and calling it with arguments\ncalculate_grade <- function(score) {\n  if (score >= 90) {\n    return(\"A\")\n  } else if (score >= 80) {\n    return(\"B\")\n  } else {\n    return(\"C\")\n  }\n}\n\ngrade <- calculate_grade(score)\nprint(grade)\n\n[1] \"A\"\n\n\n\n\n2.1.3.2 Python example\n\n\n# Assigning a value to a variable and then printing it\nage = 25\nprint(age)\n\n# Using an if statement to control program flow\n\n25\n\nif age > 18:\n    print(\"You are an adult\")\nelse:\n    print(\"You are a minor\")\n    \n# Using a for loop to iterate over a list and print each value\n\nYou are an adult\n\nfor grade in grades:\n  print(grade)\n\n# Defining a function and calling it with arguments\n\n80\n90\n85\n92\n87\n\ndef calculate_grade(score):\n  if score >= 90:\n    return \"A\"\n  elif score >= 80:\n    return \"B\"\n  else:\n    return \"C\"\n\ngrade = calculate_grade(score)\nprint(grade)\n\nA"
  },
  {
    "objectID": "03-conditions.html#if-else-statement",
    "href": "03-conditions.html#if-else-statement",
    "title": "3  Conditional execution",
    "section": "3.1 if-else statement:",
    "text": "3.1 if-else statement:\nIn R, the basic syntax for conditional execution is the if-else statement, which tests a condition and executes one set of statements if the condition is true and another set of statements if the condition is false. Here’s an example:\n\nx <- 10\nif (x > 5) {\n  print(\"x is greater than 5\")\n} else {\n  print(\"x is less than or equal to 5\")\n}\n\n[1] \"x is greater than 5\"\n\n\nIn Python, the basic syntax for conditional execution is also the if-else statement. However, Python uses a colon and indentation to denote code blocks, as opposed to R’s curly braces. Here’s the same example in Python:\n\n\nx = 10\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\n\nx is greater than 5\n\n\nOne notable difference between the two languages is that Python allows for more complex conditions using logical operators such as and, or, and not. Here’s an example:\n\nx = 10\ny = 20\nif x > 5 and y > 15:\n    print(\"both x and y meet the condition\")\nelse:\n    print(\"either x or y (or both) do not meet the condition\")\n\nboth x and y meet the condition\n\n\nIn R, the same condition would be written as follows:\n\nx <- 10\ny <- 20\nif (x > 5 & y > 15) {\n  print(\"both x and y meet the condition\")\n} else {\n  print(\"either x or y (or both) do not meet the condition\")\n}\n\n[1] \"both x and y meet the condition\""
  },
  {
    "objectID": "04-Functions.html",
    "href": "04-Functions.html",
    "title": "4  Functions",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "05-Iteration.html",
    "href": "05-Iteration.html",
    "title": "5  Iteration",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "06-Tidyworkflow.html",
    "href": "06-Tidyworkflow.html",
    "title": "6  Tidy workflow",
    "section": "",
    "text": "WIP\nMoving from R to Python: The Libraries You Need to Know https://www.kdnuggets.com/2017/02/moving-r-python-libraries.html"
  },
  {
    "objectID": "07-Import.html",
    "href": "07-Import.html",
    "title": "7  Import",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "08-tidy.html",
    "href": "08-tidy.html",
    "title": "8  Tidy",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "09-transform.html",
    "href": "09-transform.html",
    "title": "9  Transform",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "10-visualise.html#data",
    "href": "10-visualise.html#data",
    "title": "10  Data Visualization",
    "section": "10.1 Data",
    "text": "10.1 Data\nThe Palmer penguins dataset was introduced by Allison Horst, Alison Hill, and Kristen Gorman provide a great dataset for data exploration and visualization, as an alternative to iris. It was first introduced as an R package. The released version of palmerpenguins can be instaalled from CRAN with:\nR Installation install.packages(\"palmerpenguins\")\nUsing palmerpenguins python package you can easily load the Palmer penguins into your python environment.\nPython Installation pip install palmerpenguins\nThe palmerpenguins package contains two datasets : penguins and penguins_raw. penguins is a simplified version of the penguins_raw data."
  },
  {
    "objectID": "10-visualise.html#r",
    "href": "10-visualise.html#r",
    "title": "10  Data Visualization",
    "section": "10.2 R",
    "text": "10.2 R\nLoad data\n\n# Load Palmer Archipelago (Antarctica) Penguin Data\nlibrary(palmerpenguins)\n# Return the first part of the dataset\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n\n# Retrieve column names\ncolnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\n\n10.2.1 base R package\n\n# Define color for each of the 3 penguine species\ncolors <- c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\")\ncolors <- colors[as.numeric(penguins$species)]\n\n# Define shapes\nshapes = c(16, 17, 18) \nshapes <- shapes[as.numeric(penguins$species)]\n\nplot(x = penguins$flipper_length_mm,\n          y = penguins$body_mass_g,\n          col = colors,\n          pch = shapes,\n          xlab = \"Flipper Length\",\n          ylab = \"Body Mass\" )\n\n\n\n\n\n\n10.2.2 gggplot2 Package\nggplot2 is an R package dedicated to data visualization which is based on The Grammar of Graphics (Wilkinson 2012).\n\n#load ggplot2 package to make statistical graphics\nlibrary(ggplot2)\np <- ggplot(penguins) +\n  geom_point( aes(x = flipper_length_mm,\n                  y = body_mass_g,\n                  color = species,\n                  shape = species)) +\n  xlab(\"Flipper Length\")+\n  ylab(\"Body Mass\")\n\nprint(p)\n\n\n\n\n\n\n10.2.3 plotly R package for interactive data visualization\nInteractive visualization focuses on graphic representations of data that improve the way we interact with information\nplotly is an R package for creating interactive web-based graphs via the open source JavaScript graphing library plotly.js.\n\nlibrary(plotly)\np <- ggplot(penguins) +\n  geom_point( aes(x = flipper_length_mm,\n                  y = body_mass_g,\n                  color = species,\n                  shape = species)) +\n  xlab(\"Flipper Length\")+\n  ylab(\"Body Mass\")\n\n# The function ggplotly converts a ggplot2::ggplot() object to a plotly object.\nplotly::ggplotly(p)\n\n\n\n\n\nMethod 2\n\nlibrary(plotly)\nfig <- plot_ly(penguins, \n               x = ~flipper_length_mm,\n               y = ~body_mass_g, \n               color = ~species,\n               symbol = ~species,\n               type = \"scatter\")\nfig"
  },
  {
    "objectID": "10-visualise.html#python",
    "href": "10-visualise.html#python",
    "title": "10  Data Visualization",
    "section": "10.3 Python",
    "text": "10.3 Python\n\nLoad data\n\n#load functions in palmerpenguins package\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n# Return the first part of the dataset\npenguins.head()\n# Retrieve column names\nlist(penguins.columns)\n\n\n10.3.1 Matplotlib package\nMatplotlib is mainly deployed for basic plotting. Visualization using Matplotlib generally consists of bars, pies, lines, scatter plots and so on.\n\n# Import matplotlib to make statistical graphics. \n# By convention, it is imported with the shorthand sns.\nimport matplotlib.pyplot as plt\n\ncolors = {'Adelie':'blue', 'Gentoo':'orange', 'Chinstrap':'green'}\nplt.scatter(penguins.flipper_length_mm,\npenguins.body_mass_g, \nc= penguins.species.apply(lambda x: colors[x]))\nplt.xlabel('Flipper Length')\nplt.ylabel('Body Mass')\n\n\n\n\n\n\n\n\n\n\n\n\n10.3.2 seaborn Package\nSeaborn is an easy-to-use high level statistical plotting library which provides a variety of visualization patterns. It uses fewer syntax and has easily interesting default themes.\nIt tries to provide a ‘grammar of graphics’ style way to create plots but in a pythonic style without getting the exact syntax from ggplot as in plotnine. \nIntroduction to Seaborn\n\n# Import seaborn to make statistical graphics. \n# By convention, it is imported with the shorthand sns.\nimport seaborn as sns \n#load functions in palmerpenguins package\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n\n# Apply the default theme\nsns.set_theme()\n# sns.set_style('whitegrid')\np = sns.relplot(x = 'flipper_length_mm',\n            y ='body_mass_g',\n            hue = 'species',\n            style = 'species',\n            data = penguins)\np.set_xlabels('Flipper Length')\np.set_ylabels('Body Mass')   \n\n\n\n\n\n\n\n\n\n\nThe function relplot() is named that way because it is designed to visualize many different statistical relationships. The relplot() function has a convenient kind parameter that lets you easily switch to this alternate representation: scatterplot() with kind=\"scatter\"; the default and lineplot() with kind=\"line\".\n\n\n10.3.3 plotnine package\nhttps://pypi.org/project/plotnine/\nplotnine is an implementation of a grammar of graphics in Python, it is based on ggplot2. The grammar allows users to compose plots by explicitly mapping data to the visual objects that make up the plot.\nPlotting with a grammar is powerful, it makes custom (and otherwise complex) plots are easy to think about and then create, while the simple plots remain simple.\nNOTE: R vs Python Syntax\nUnlike in R, now all the variables must be enclosed by single quotes\n\nfrom plotnine import *\n# unlike in R, now all the variables must be enclosed by single quotes\n(ggplot(penguins) +\n  geom_point(aes(x = 'flipper_length_mm',\n                  y = 'body_mass_g',\n                  color = 'species',\n                  shape = 'species')) +\n  xlab(\"Flipper Length\")+\n  ylab(\"Body Mass\"))\n\n\n\n\n\n\n\n\n\n\n\n\n10.3.4 plotly Python library for interactive data visualization\nThe plotly.express (Plotly Express or PX) module contains functions that can create entire figures at once. It is usually imported as px. Plotly Express is a built-in part of the plotly library.\n\nimport plotly.express as px\n\nfig = px.scatter(penguins,\n                 x=\"flipper_length_mm\",\n                 y=\"body_mass_g\",\n                 color= \"species\",\n                 symbol= \"species\",\n                 labels=dict(flipper_length_mm=\"Flipper Length\",\n                             body_mass_g=\"Body Mass\"))\nfig.show()\n\n\n\n\n\n\n\n\n                                \n                        170180190200210220230250030003500400045005000550060006500speciesAdelieGentooChinstrapFlipper LengthBody Massplotly-logomark                    \n\n\n\n\n\n\n\n\nWilkinson, Leland. 2012. “The Grammar of Graphics.” In Handbook of Computational Statistics, 375–414. Springer."
  },
  {
    "objectID": "11-model.html",
    "href": "11-model.html",
    "title": "11  Model",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "12-communicate.html",
    "href": "12-communicate.html",
    "title": "12  Communicate",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "13-advancedRnPython.html#time-series-forecasting",
    "href": "13-advancedRnPython.html#time-series-forecasting",
    "title": "13  Advanced R and Python",
    "section": "13.1 Time Series Forecasting",
    "text": "13.1 Time Series Forecasting\n\n\n\nR\nPython\n\n\n\n\nfable-Forecasting Models for Tidy Time Series\nstatsmodels- Statistics based models\n\n\nforecast- Forecasting Functions for Time Series and Linear Models\nsktime- A unified framework for machine learning with time series\n\n\n\\(\\text{}\\)\nGluonTS- Deep learning-based models."
  },
  {
    "objectID": "14-Jupyter.html#how-to-install-jupyter-environment",
    "href": "14-Jupyter.html#how-to-install-jupyter-environment",
    "title": "14  Jupyter Notebooks",
    "section": "14.1 How to install Jupyter environment?",
    "text": "14.1 How to install Jupyter environment?\nFirst, open a new command prompt (Windows) or terminal (Mac/Linux) on your workstation, and second, execute the following command:\njupyter notebook\nIf the above command fails, first, you need to install python on your workstation. There are two popular methods to install Python on your workstation.\n\nInstalling Python using Anaconda Distribution\nInstalling Raw Python\n\nAfter installing python using one of the above methods, then we need to installing Jupyter Notebook using either Anaconda or pip.\n\n\n14.1.1 Method 1: How to Install the Notebook Using pip\n\nIf you don’t want to install Anaconda, you just have to make sure that you have the latest version of pip.\nIf you have installed Python, you will typically already have it.\nYou can check the already installed pip version\n\npip3 --version\n\nYou can upgrade that using\n\n# On Windows\npython -m pip install -U pip setuptools\n\n# On OS X or Linux\npip3 install -U pip setuptools\n\nWhen you install Python directly from its official website, it does not include Jupyter Notebook in its standard library.\nIn this case, you need to install Jupyter Notebook using the pip. The process is as follows:\n\npython -m pip install jupyter\nor if you are using Python 3\npython3 -m pip install jupyter\nor simply\npip install jupyter\nCongratulations, you have installed Jupyter Notebook!\nAfter you have installed the Jupyter Notebook on your computer, you are ready to run the notebook server.\n\n\n14.1.2 Method 2: Installing Jupyter Notebook using Anaconda\n\nIf you have installed Python using Anaconda Distribution, then it includes Python, the Jupyter Notebook, and other commonly used packages for the scientific community.\nYou can follow the instructions for the installation of Anaconda here for Mac: click here or Windows: click here."
  },
  {
    "objectID": "14-Jupyter.html#working-with-jupyter-notebook",
    "href": "14-Jupyter.html#working-with-jupyter-notebook",
    "title": "14  Jupyter Notebooks",
    "section": "14.2 Working with Jupyter Notebook",
    "text": "14.2 Working with Jupyter Notebook\nThis video: (click here) will guide you to create your first jupyter notebook."
  },
  {
    "objectID": "15-Createproject.html",
    "href": "15-Createproject.html",
    "title": "15  Working with jupyter notebook",
    "section": "",
    "text": "16 Working with pycharm"
  },
  {
    "objectID": "15-Createproject.html#install-packages",
    "href": "15-Createproject.html#install-packages",
    "title": "15  Working with jupyter notebook",
    "section": "16.1 install packages",
    "text": "16.1 install packages\npython -m pip install <package>\nmust read what toavoide: https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/"
  },
  {
    "objectID": "15-Createproject.html#install-python-package-using-jupyter-notebook",
    "href": "15-Createproject.html#install-python-package-using-jupyter-notebook",
    "title": "15  Working with jupyter notebook",
    "section": "16.2 Install Python package using Jupyter Notebook",
    "text": "16.2 Install Python package using Jupyter Notebook\n\nhttps://www.geeksforgeeks.org/install-python-package-using-jupyter-notebook/\n\nimport sys !{sys.executable} -m pip install [package_name]"
  },
  {
    "objectID": "03-conditions.html",
    "href": "03-conditions.html",
    "title": "3  Conditional execution",
    "section": "",
    "text": "4 switch statement (R only)\nThis is an example of a switch statement in R\nIn this example, we define a variable x with the value “B”. We then use the switch() function to check the value of x and execute a corresponding action. In this case, since x is “B”, the second argument of the switch() function is matched, and the message “Letter B” is printed to the console.\nIf x were instead set to “A”, “C”, or any other value, the switch() function would check each argument in turn until it found a match. If none of the provided arguments matched the value of x, the default action specified in the final argument (in this case, printing “Not A, B, or C”) would be executed.\nPython has a similar construct to the switch statement in other programming languages, called if-elif-else statements.\nHere’s an example of how you can use if-elif-else statements to achieve the same functionality as the switch statement in R:\nIn this example, the value of x is set to “B”. We then use if-elif-else statements to check the value of x and execute the corresponding action. In this case, since x is “B”, the second if condition is true, and the message “Letter B” is printed to the console.\nJust like the switch statement in R, if none of the conditions in the if-elif-else statements evaluate to true, the else block is executed."
  },
  {
    "objectID": "03-conditions.html#if-else-if-else-statement",
    "href": "03-conditions.html#if-else-if-else-statement",
    "title": "3  Conditional execution",
    "section": "3.3 if-else if-else statement",
    "text": "3.3 if-else if-else statement\nR example:\n\nx <- 10\nif (x < 5) {\n  print(\"x is less than 5\")\n} else if (x >= 5 & x < 10) {\n  print(\"x is between 5 and 10\")\n} else {\n  print(\"x is greater than or equal to 10\")\n}\n\n[1] \"x is greater than or equal to 10\"\n\n\nPython example:\n\nx = 10\nif x < 5:\n    print(\"x is less than 5\")\nelif x >= 5 and x < 10:\n    print(\"x is between 5 and 10\")\nelse:\n    print(\"x is greater than or equal to 10\")\n\nx is greater than or equal to 10\n\n\nIn both examples, we define a variable x with the value of 10, and then use if-else if-else statements to check the value of x and execute the corresponding action.\nIn the R example, we use the if, else if, and else keywords to create a chain of conditions that will be checked in order. If the first condition is true, the code block associated with the if statement will be executed. If the first condition is false, but the second condition is true, the code block associated with the else if statement will be executed. If neither the if nor the else if statements evaluate to true, the code block associated with the else statement will be executed.\nIn the Python example, we use the if, elif, and else keywords to create the same chain of conditions. The difference is that Python uses the keyword elif instead of else if. Otherwise, the logic is the same as in the R example.\nBoth examples will produce the same output, since the value of x is 10, which is greater than or equal to 10. The output will be:"
  },
  {
    "objectID": "03-conditions.html#ternary-operator",
    "href": "03-conditions.html#ternary-operator",
    "title": "3  Conditional execution",
    "section": "3.4 Ternary operator",
    "text": "3.4 Ternary operator\nA ternary operator is a shorthand way of writing an if-else statement that returns a value. It’s called “ternary” because it involves three operands: the condition being evaluated, the value to return if the condition is true, and the value to return if the condition is false.\nThe ternary operator is commonly used in programming languages like Python and some other languages to write concise, one-line expressions that return a value based on a condition. It’s often used when the if-else statement would only contain one statement in each block.\nThe syntax for the ternary operator varies slightly between languages. In Python, the syntax for the ternary operator is:\nvalue_if_true if condition else value_if_false\nIn this syntax, condition is the expression being evaluated, value_if_true is the value to return if the condition is true, and value_if_false is the value to return if the condition is false.\nIn R, the ternary operator is implemented using the ifelse() function. The syntax of ifelse() function is:\nifelse(condition, value_if_true, value_if_false)\nIn this syntax, condition is the expression being evaluated, value_if_true is the value to return if the condition is true, and value_if_false is the value to return if the condition is false.\nFor example, consider the following code snippet:\n\nx <- 5\ny <- 10\nresult <- ifelse(x > y, \"x is greater than y\", \"x is less than or equal to y\")\n\nIn this example, we are using the ifelse() function to check whether x is greater than y. If the condition is true, the value “x is greater than y” will be assigned to the result variable. If the condition is false, the value “x is less than or equal to y” will be assigned to the result variable.\nNote that the ifelse() function can also be used with vectors and matrices, allowing you to apply the ternary operator to multiple values at once.\nHere’s an example of how to use the ternary operator in Python:\n\n\nx = 10\ny = 20\nmax_value = x if x > y else y\nprint(max_value)\n\n20\n\n\nIn this example, we define two variables, x and y, with the values 10 and 20, respectively. We then use the ternary operator to determine the maximum value between the two.\nThe ternary operator is a shorthand way of writing an if-else statement. In this case, the condition we want to check is x > y, and the two possible outcomes are x and y. If the condition is true, the value of x is assigned to max_value. Otherwise, the value of y is assigned to max_value.\nThe output of this code will be 20.\nsince y has a larger value than x.\nNote that the syntax for the ternary operator in Python is as follows:\nvalue_if_true if condition else value_if_false\nwhere condition is the expression t\nR also has a similar shorthand way of writing an if-else statement, called the “ternary operator” or “conditional operator”.\nHere’s an example of how to use the ternary operator in R:hat is being evaluated, value_if_true is the value to return if condition is true, and value_if_false is the value to return if condition is false.\n\nx <- 10\ny <- 20\nmax_value <- ifelse(x > y, x, y)\nprint(max_value)\n\n[1] 20\n\n\nIn this example, we define two variables, x and y, with the values 10 and 20, respectively. We then use the ternary operator to determine the maximum value between the two.\nThe ternary operator in R is the ifelse() function. Its syntax is similar to that of the ternary operator in Python, where the first argument is the condition we want to check, the second argument is the value to return if the condition is true, and the third argument is the value to return if the condition is false.\nIn this case, the condition we want to check is x > y, and the two possible outcomes are x and y. If the condition is true, the value of x is assigned to max_value. Otherwise, the value of y is assigned to max_value.\nThe output of this code will be 20.\nsince y has a larger value than x.\nNote that the syntax for the ifelse() function in R is as follows:\nifelse(condition, value_if_true, value_if_false)\nwhere condition is the expression that is being evaluated, value_if_true is the value to return if condition is true, and value_if_false is the value to return if condition is false."
  },
  {
    "objectID": "03-conditions.html#nested-if-else-statement",
    "href": "03-conditions.html#nested-if-else-statement",
    "title": "3  Conditional execution",
    "section": "3.5 Nested if-else statement",
    "text": "3.5 Nested if-else statement\nhere are examples of nested if-else statements in R and Python:\nR example:\n\nx <- 10\ny <- 20\nz <- 30\n\nif (x > y) {\n  if (x > z) {\n    print(\"x is the largest number\")\n  } else {\n    print(\"z is the largest number\")\n  }\n} else {\n  if (y > z) {\n    print(\"y is the largest number\")\n  } else {\n    print(\"z is the largest number\")\n  }\n}\n\n[1] \"z is the largest number\"\n\n\nIn this example, we have three variables x, y, and z. We use nested if-else statements to determine which of these variables contains the largest number.\nPython example:\n\nx = 10\ny = 20\nz = 30\n\nif x > y:\n    if x > z:\n        print(\"x is the largest number\")\n    else:\n        print(\"z is the largest number\")\nelse:\n    if y > z:\n        print(\"y is the largest number\")\n    else:\n        print(\"z is the largest number\")\n\nz is the largest number\n\n\nThis Python code does the same thing as the R code above. We have the same three variables x, y, and z, and we use nested if-else statements to determine which one is the largest. Note that the syntax for the if-else statements is slightly different in Python, using colons to indicate the start of a block of code, and indentation to indicate which code belongs to each block."
  },
  {
    "objectID": "03-conditions.html#switch-statement-r-only",
    "href": "03-conditions.html#switch-statement-r-only",
    "title": "3  Conditional execution",
    "section": "3.2 switch statement (R only)",
    "text": "3.2 switch statement (R only)\nThis is an example of a switch statement in R\n\nx <- \"B\"\nswitch(x,\n       \"A\" = print(\"Letter A\"),\n       \"B\" = print(\"Letter B\"),\n       \"C\" = print(\"Letter C\"),\n       print(\"Not A, B, or C\")\n)\n\n[1] \"Letter B\"\n\n\nIn this example, we define a variable x with the value “B”. We then use the switch() function to check the value of x and execute a corresponding action. In this case, since x is “B”, the second argument of the switch() function is matched, and the message “Letter B” is printed to the console.\nIf x were instead set to “A”, “C”, or any other value, the switch() function would check each argument in turn until it found a match. If none of the provided arguments matched the value of x, the default action specified in the final argument (in this case, printing “Not A, B, or C”) would be executed.\nPython has a similar construct to the switch statement in other programming languages, called if-elif-else statements.\nHere’s an example of how you can use if-elif-else statements to achieve the same functionality as the switch statement in R:\n\nx = \"B\"\nif x == \"A\":\n    print(\"Letter A\")\nelif x == \"B\":\n    print(\"Letter B\")\nelif x == \"C\":\n    print(\"Letter C\")\nelse:\n    print(\"Not A, B, or C\")\n\nLetter B\n\n\nIn this example, the value of x is set to “B”. We then use if-elif-else statements to check the value of x and execute the corresponding action. In this case, since x is “B”, the second if condition is true, and the message “Letter B” is printed to the console.\nJust like the switch statement in R, if none of the conditions in the if-elif-else statements evaluate to true, the else block is executed."
  }
]