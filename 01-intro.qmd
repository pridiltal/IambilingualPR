# Introduction to R and Python {#intro}

R Vs Python: Whatâ€™s the Difference? https://www.guru99.com/r-vs-python.html

## About R and Python

R and Python are both versatile and widely used open-source programming languages with uses in statistical computing and graphics. R is an object-oriented environment that enables statistical techniques to be easily implemented and adapted for different use cases. It is specifically designed for statistical computing and graphics. R's extensive library of packages, which provide a variety of functions, data, and documentation that can be readily shared and used by other researchers and analysts, is one of its main strengths. These packages provide a wide range of capabilities, making R an essential tool for data analysis, visualization, and modeling across a wide range of disciplines.

Python, on the other hand, is a general-purpose computer language that excels at statistical computing and graphics. Python's object-oriented method lends itself well to organizing and manipulating complicated data structures, and its interactive nature enables rapid prototyping and experimentation. Python also has a robust ecosystem of third-party libraries and frameworks, including several for data processing and visualization. While Python's statistical capabilities are not as extensive as those of R, its versatility and popularity make it a popular option for a variety of applications other than statistical computing.

When considering programming languages for data analysis and manipulation, R and Python are two of the most popular choices. While both languages have similarities in terms of syntax and functionality, there are also several key differences between the two that can impact their usefulness for different projects or tasks. In this context, let's explore some of the key differences between R and Python, including their data structures, function syntax, package ecosystems, object-oriented programming support, and error handling.

1. Data structures: R has several built-in data structures, such as vectors, matrices, data frames, and lists, that are optimized for statistical analysis and data manipulation. Python, on the other hand, has a more diverse range of built-in data structures, including lists, tuples, dictionaries, and sets, that can be used for a variety of purposes.

2. Function syntax: The syntax for defining functions is slightly different in R and Python. In R, the function keyword is used to define a function, while in Python the def keyword is used. Additionally, R allows for optional arguments to be specified by name, while Python requires all arguments to be specified in order.

3. Package ecosystems: Both R and Python have large ecosystems of packages and libraries that extend the functionality of the language. However, R's ecosystem is more focused on statistical analysis and data manipulation, while Python's ecosystem is more diverse and includes libraries for web development, machine learning, scientific computing, and more.

4. Object-oriented programming: Python is a fully object-oriented language, whereas R has some support for object-oriented programming but is primarily a functional programming language.

5. Error handling: Python has a built-in mechanism for handling errors, called exceptions, that allows for more fine-grained control over error handling. R does not have a built-in exception mechanism, but instead relies on returning error codes or messages from functions.

Overall, the choice between R and Python depends on the specific needs of the project or task at hand. R is a good choice for statistical analysis and data manipulation, while Python is more versatile and can be used for a wider range of tasks. However, both languages have their strengths and weaknesses, and many projects may benefit from using both languages together in a complementary way.

## History of R and Python

R is an implementation of the S computer language, which was created in 1976 by John Chambers. Ross Ihaka and Robert Gentleman of the University of Auckland in New Zealand created an alternate version of the basic S language in 1991. R, an alternative implementation, was released in 1993. R has since grown in popularity and is now a top statistical computing and graphics tool.

Python, on the other hand, was developed in 1989 at Centrum Wiskunde & Informatica (CWI) in the Netherlands by Guido van Rossum. It was created as a replacement for the ABC computer language. Python 2.0 was released in 2000, and Python 3.0, a significant language revision that is not fully backward-compatible, was released in 2008. Today, many developers create libraries especially for use with Python 3, and the language has grown in popularity for a variety of uses other than statistical computing, such as web development, machine learning, and scientific computing.


## Story behind their names

### R 

R is called after its creators, Robert Gentleman and Ross Ihaka. S was named after its creators, John Chambers and his coworkers at Bell Labs, whose surnames all began with the letter "S." This practice is continued by R's name, which incorporates the first letter of its creators' first names.


### Python

Guido van Rossum, the creator of Python, was a fan of the British comedy group [Monty Python's Flying Circus](https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus). Van Rossum selected the name Python as a working title for his project in December 1989, while working at the Netherlands' National Research Institute for Mathematics and Computer Science. He wanted a short, distinct, and slightly mysterious name for his language, and he liked the connotations of the term "Python" - it was an uncommon and exotic species, and it also had a connection to serpents, implying the language's power and flexibility. Van Rossum kept the name when he released the first version of Python in February 1991, and it has since become one of the most famous programming languages in the world.


## Logo

```{r   out.width = "30%", echo = FALSE, fig.align='center', fig.cap="Retrieved from: https://www.r-project.org/logo/"}
knitr::include_graphics("fig/C1_Rlogo.png")
```

```{r   out.width = "60%", echo = FALSE, fig.align='center', fig.cap="Retrieved from: https://www.python.org/community/logos/"}
knitr::include_graphics("fig/C1_Pythonlogo.png")
```

<!--
## Worldwide Google Trends 

```{r googletrends, echo = FALSE, warning=FALSE, message=FALSE, fig.width=13, fig.height=8}
library(fpp3)
library(tidyverse)
data<-read.csv(here::here("data","multiTimeline2004.csv" ), header = TRUE)
datatsibble <- data%>% pivot_longer(cols=2:3,names_to = "Language", values_to = "Google trends (worldwide)" )

datatsibble$Month <- yearmonth(datatsibble$Month)
datatsibble <- datatsibble %>% as_tsibble(index = Month, key = Language)
p<- datatsibble %>% autoplot() +
  xlab("Time")
print(p)
```


-->

## Installation

### R 

To get started with R programming, you'll need to follow two steps:

1. Download R, a programming language for statistical computing and graphics. You can get the latest version for free from the official R website at https://cran.rstudio.com/. Make sure to choose the appropriate version for your computer's operating system.

2. Install RStudio, an integrated development environment (IDE) for R. RStudio makes it easier to write, debug, and organize your R code. There are two versions of RStudio available: RStudio Desktop and RStudio Server. RStudio Desktop is a standalone desktop application that you can download from https://posit.co/download/rstudio-desktop/. RStudio Server is a web-based version that runs on a remote server and can be accessed through a web browser.


### Python 

Ref: https://www.w3schools.com/python/python_getstarted.asp

Many PCs and Macs will have python already installed.

To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):

```C:\Users\Your Name>python --version```

To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:

```python --version```

If you find that you do not have python installed on your computer, then you can download it for free from the following website: https://www.python.org/

**Install PyCharm IDE**

PyCharm is a cross-platform IDE that provides consistent experience on the Windows, macOS, and Linux operating systems.

PyCharm is available in three editions: Professional, Community, and Edu. The Community and Edu editions are open-source projects and they are free, but they have fewer features. PyCharm Edu provides courses and helps you learn programming with Python. The Professional edition is commercial, and provides an outstanding set of tools and features. For details, see the editions comparison matrix.

**Jupyter Notebook**

Is Anaconda necessary to be installed to PC besides Jupyter Notebook?

[source](https://stackoverflow.com/questions/64426680/is-anaconda-necessary-to-be-installed-to-pc-besides-jupyter-notebook)

Is there a way to install python packages within Jupyter Notebook, or should I really install Anaconda? What is the benefit of installing Anaconda (besides Jupyter Notebook)?


The packages in python are generally installed with "pip" (or "conda") in the terminal and are then available regardless where you run your script from. Assuming you don't have multiple python versions set up on your PC, they should then all be available in your jupyter-notebook also.

If you don't want to open another window to do this, you can also run BASH code from Jupyter itself, just start the line with an exclamation mark (!)

[Source - How to use Pip from the Jupyter Notebook](https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/)
```
# Not Recommended 
# DON'T DO THIS
!pip install numpy
```

Here is a short snippet that should generally work:

**Install a pip package in the current Jupyter kernel**

```
import sys
!{sys.executable} -m pip install numpy
```

The benefits of Anaconda are that it bundles everything you need to at least start your more basic projects (python release, basic packages, IDE) and that you can set-up project-specific environments that do not interfere with your system-wide package installations.


https://stackoverflow.com/questions/64426680/is-anaconda-necessary-to-be-installed-to-pc-besides-jupyter-notebook

Python packages are not installed with python functions, like it would be the case in R with install.packages("package name"). Instead, an external package manager usually is used to install and possibly compile the package files to a directory where python can import it from.

Anaconda offers (among others) the package manager conda. Most popular is pip. Some Linux distributions also offer python packages via their package manager (e.g. apt on Debian/Ubuntu). All these package managers download packages from their own repositories, so conda install numpy, pip install numpy and apt install python3-numpy all install a package numpy, but from different sources and in possibly different versions.

Jupyter Notebook is a programming environment, where you can execute shell commands with !command, so depending on the system where the Jupyter server is running, you can use !pip install numpy, !conda install numpy or other commands as cells in the Jupyter Notebook you are working in. This will run the command in a shell.

That graphical menu with Jupyter, RStudio etc. you describe is the program "Anaconda Navigator", which is installed with Anaconda. Jupyter is just a Python library, which is pre-installed with Anaconda, but can also be installed via pip, apt and other package managers.

Anaconda Navigator is a desktop graphical user interface (GUI) included in AnacondaÂ® distribution that allows you to launch applications and easily manage conda packages, environments, and channels without using command-line commands. 


## Install and Load Libraries

### R

R Packages: A Beginner's Guide https://www.datacamp.com/community/tutorials/r-packages-guide?utm_source=adwords_ppc&utm_campaignid=1655852085&utm_adgroupid=61045434222&utm_device=c&utm_keyword=%2Bload%20%2Bpackage%20%2Br&utm_matchtype=b&utm_network=g&utm_adpostion=&utm_creative=469789579329&utm_targetid=aud-522010995285:kwd-589281898774&utm_loc_interest_ms=9071445&utm_loc_physical_ms=1009919&gclid=Cj0KCQjwyZmEBhCpARIsALIzmnKGh4ZVHa4OxhLq0JUzpoBMMRhQvCGEmvscFuLZ5CI3V3JPsQ2v9P8aAhwpEALw_wcB

An **R package** is a way to organize your own work and share it with others. Typically, a package contains code, documentation for the package and the functions inside, some tests to check everything works as it should, and data sets.

Three of the most popular repositories for R packages are: CRAN, Bioconductor and Github.

#### Installing Packages From CRAN

`install.packages("package_name")`

Example

`install.packages("tidyverse")`

After running this, some messages will be diplayed on the console. They will depend on what operating system you are using, the dependencies, and if the package was successfully installed.

To install more than a package at the same time, we can use a character vector 

`install.packages(c("vioplot", "MASS"))`

**The function `install.packages` will download the source code from on the CRAN mirrors and install the package (and any dependencies) locally on your computer.**

You have to install a package only once.

#### Load Packages

After a package is installed, you are ready to use its functionalities. 

If you just need a sporadic use of a few functions or data inside a package you can access them with the notation 

`packagename::functionname()`.

If you will make a more intensive use of the package, then maybe is worth to load it into memory. The simplest way to do this is with the `library()` command.

Please note that the input of install.packages() is a character vector and requires the name to be in quotes, while library() accepts either character or name and makes it possible for you to write the name of the package without quotes.

Once you have the package installed, you can load the library into your R session for use. Any of the functions that are specific to that package will be available for you to use by simply calling the function as you would for any of the base functions. Note that quotations are not required here.

`library(tidyverse)`

### Python

Use 'import module' or 'from module import'? https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import


**Method 1:** `import module`

**Method 2:** `from module import foo`

The difference between `import module` and `from module import foo` is  subjective. User can select one method and be consitent in the use of it. 

`import module`  |  `from module import foo`
-----------------|-----------------------
**Pros**             |   **Pros**
- Less Maintanence of the import statements  | - Less typying to use `foo` function
- Don't need to add any aditional imports to start using another item from the same module  |  - More control over whcih items of the module can be accessed
**Cons**             |   **Cons**
-  Typing `module.foo` in the code be tedious (dull, boring )  | to use new items from the module the user have to update the `import` statement

- It can be minimized by using `import module as mo`, then typing `mo.foo`  | You loose context about `foo`. For example it is less clear `ceil()` does, compared to `math.ceil()`


**Don't use**

- `from modle import *`

   - Because it clutters or fills with untidy collection of things in the namespace
   
- `import *`

   - For any reasonable large set of code, if you `import *` you will likely be cementing it into the module, unable to be removed.
   
   - This is because now it is difficullt to identiify what items used in the code are coming from `module`. 

## Ranked:15Python packages
for Data Science


http://blog.thedataincubator.com/wp-content/uploads/2017/04/Ranked-15-Python-Packages-for-Data-Science.pdf




